name: neural-dx7-pipeline

on:
  push:
    branches: [ main ]
    tags:
      - '*'
  pull_request:
    branches: [ main ]

jobs:
  build-linux:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
         submodules: recursive
         lfs: true

    - name: Install System Dependencies
      run: make deps

    - name: Download LibTorch
      run: make download-libtorch

    - name: Setup JUCE
      run: make setup

    - name: Set build type
      shell: bash
      run: |
        if [ "$GITHUB_REF_TYPE" == "tag" ]; then
            echo "BUILD_TYPE=Release" >> "$GITHUB_ENV"
            echo "BUILD_VERSION=${GITHUB_REF_NAME:1}" >> "$GITHUB_ENV"
        elif [ "$GITHUB_REF_NAME" == "main" ]; then
            echo "BUILD_TYPE=Release" >> "$GITHUB_ENV"
            echo "BUILD_VERSION=DEVBUILD" >> "$GITHUB_ENV"
        else
            echo "BUILD_TYPE=Debug" >> "$GITHUB_ENV"
            echo "BUILD_VERSION=DEVBUILD" >> "$GITHUB_ENV"
        fi
        echo "BUILD PARM =========="
        cat $GITHUB_ENV

    - name: Build
      run: make build

    - name: Show Build Output
      run: ls -lR ${{github.workspace}}/build/NeuralDX7PatchGenerator_artefacts

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: linux-bin
        path: |
          ${{github.workspace}}/build/NeuralDX7PatchGenerator_artefacts/${{env.BUILD_TYPE}}/NeuralDX7PatchGenerator
          ${{github.workspace}}/build/NeuralDX7PatchGenerator_artefacts/${{env.BUILD_TYPE}}/VST3/
          ${{github.workspace}}/build/NeuralDX7PatchGenerator_artefacts/${{env.BUILD_TYPE}}/lib/
          !**/*.a

  build-macos:
    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
         submodules: recursive
         lfs: true

    - name: Install System Dependencies
      run: make deps

    - name: Download LibTorch
      run: make download-libtorch

    - name: Setup JUCE
      run: make setup

    - name: Set build type
      shell: bash
      run: |
        if [ "$GITHUB_REF_TYPE" == "tag" ]; then
            echo "BUILD_TYPE=Release" >> "$GITHUB_ENV"
            echo "BUILD_VERSION=${GITHUB_REF_NAME:1}" >> "$GITHUB_ENV"
        elif [ "$GITHUB_REF_NAME" == "main" ]; then
            echo "BUILD_TYPE=Release" >> "$GITHUB_ENV"
            echo "BUILD_VERSION=DEVBUILD" >> "$GITHUB_ENV"
        else
            echo "BUILD_TYPE=Debug" >> "$GITHUB_ENV"
            echo "BUILD_VERSION=DEVBUILD" >> "$GITHUB_ENV"
        fi
        echo "BUILD PARM =========="
        cat $GITHUB_ENV

    - name: Build
      run: make build

    - name: Show Build Output
      run: ls -lR ${{github.workspace}}/build/NeuralDX7PatchGenerator_artefacts

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: macos-bin
        path: |
          ${{github.workspace}}/build/NeuralDX7PatchGenerator_artefacts/${{env.BUILD_TYPE}}/NeuralDX7PatchGenerator.app
          ${{github.workspace}}/build/NeuralDX7PatchGenerator_artefacts/${{env.BUILD_TYPE}}/NeuralDX7PatchGenerator.component
          ${{github.workspace}}/build/NeuralDX7PatchGenerator_artefacts/${{env.BUILD_TYPE}}/AU/
          ${{github.workspace}}/build/NeuralDX7PatchGenerator_artefacts/${{env.BUILD_TYPE}}/VST3/

  build-windows:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4
      with:
          submodules: recursive
          lfs: true

    - name: Set build type
      shell: bash
      run: |
        if [ "$GITHUB_REF_TYPE" == "tag" ]; then
            echo "BUILD_TYPE=Release" >> "$GITHUB_ENV"
            echo "BUILD_VERSION=${GITHUB_REF_NAME:1}" >> "$GITHUB_ENV"
        elif [ "$GITHUB_REF_NAME" == "main" ]; then
            echo "BUILD_TYPE=Release" >> "$GITHUB_ENV"
            echo "BUILD_VERSION=DEVBUILD" >> "$GITHUB_ENV"
        else
            echo "BUILD_TYPE=Debug" >> "$GITHUB_ENV"
            echo "BUILD_VERSION=DEVBUILD" >> "$GITHUB_ENV"
        fi
        echo "BUILD PARM =========="
        cat $GITHUB_ENV

    - name: Install Dependencies
      shell: bash
      run: make deps

    - name: Download LibTorch
      shell: bash
      run: make download-libtorch

    - name: Setup JUCE
      shell: bash
      run: make setup

    - name: Build
      shell: bash
      run: make build

    - name: Show
      shell: cmd
      run: dir /s ${{github.workspace}}\build\NeuralDX7PatchGenerator_artefacts

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: windows-bin
        path: |
          ${{github.workspace}}/build/NeuralDX7PatchGenerator_artefacts/${{env.BUILD_TYPE}}/NeuralDX7PatchGenerator.exe
          ${{github.workspace}}/build/NeuralDX7PatchGenerator_artefacts/${{env.BUILD_TYPE}}/VST3/
          ${{github.workspace}}/build/NeuralDX7PatchGenerator_artefacts/${{env.BUILD_TYPE}}/*.dll

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-linux, build-macos, build-windows]
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Extract tag name
        id: extract_tag
        run: |
          TAG_NAME="${GITHUB_REF#refs/tags/}"
          echo "tag=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "Extracted tag: $TAG_NAME"
        
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Create release packages
        run: |
          # Create Windows ZIP
          if [ -d "./artifacts/windows-bin" ]; then
            cd artifacts/windows-bin
            zip -r ../../NeuralDX7PatchGenerator-${{ steps.extract_tag.outputs.tag }}-windows.zip .
            cd ../..
          fi
          
          # Create Linux ZIP  
          if [ -d "./artifacts/linux-bin" ]; then
            cd artifacts/linux-bin
            zip -r ../../NeuralDX7PatchGenerator-${{ steps.extract_tag.outputs.tag }}-linux.zip .
            cd ../..
          fi
          
          # Create macOS ZIP
          if [ -d "./artifacts/macos-bin" ]; then
            cd artifacts/macos-bin
            zip -r ../../NeuralDX7PatchGenerator-${{ steps.extract_tag.outputs.tag }}-macos.zip .
            cd ../..
          fi

      - name: Create Release with artifacts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "${{ steps.extract_tag.outputs.tag }}" \
            --repo="$GITHUB_REPOSITORY" \
            --title="Release ${{ steps.extract_tag.outputs.tag }}" \
            --generate-notes \
            NeuralDX7PatchGenerator-${{ steps.extract_tag.outputs.tag }}-*.zip